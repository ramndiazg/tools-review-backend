// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"tools-review-backend/ent/predicate"
	"tools-review-backend/ent/review"
	"tools-review-backend/ent/tool"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ToolUpdate is the builder for updating Tool entities.
type ToolUpdate struct {
	config
	hooks    []Hook
	mutation *ToolMutation
}

// Where appends a list predicates to the ToolUpdate builder.
func (tu *ToolUpdate) Where(ps ...predicate.Tool) *ToolUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *ToolUpdate) SetName(s string) *ToolUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *ToolUpdate) SetNillableName(s *string) *ToolUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// SetDescription sets the "description" field.
func (tu *ToolUpdate) SetDescription(s string) *ToolUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *ToolUpdate) SetNillableDescription(s *string) *ToolUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// SetCategory sets the "category" field.
func (tu *ToolUpdate) SetCategory(s string) *ToolUpdate {
	tu.mutation.SetCategory(s)
	return tu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (tu *ToolUpdate) SetNillableCategory(s *string) *ToolUpdate {
	if s != nil {
		tu.SetCategory(*s)
	}
	return tu
}

// SetWebsite sets the "website" field.
func (tu *ToolUpdate) SetWebsite(s string) *ToolUpdate {
	tu.mutation.SetWebsite(s)
	return tu
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (tu *ToolUpdate) SetNillableWebsite(s *string) *ToolUpdate {
	if s != nil {
		tu.SetWebsite(*s)
	}
	return tu
}

// SetImageURL sets the "image_url" field.
func (tu *ToolUpdate) SetImageURL(s string) *ToolUpdate {
	tu.mutation.SetImageURL(s)
	return tu
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (tu *ToolUpdate) SetNillableImageURL(s *string) *ToolUpdate {
	if s != nil {
		tu.SetImageURL(*s)
	}
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *ToolUpdate) SetCreatedAt(t time.Time) *ToolUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *ToolUpdate) SetNillableCreatedAt(t *time.Time) *ToolUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// AddReviewIDs adds the "reviews" edge to the Review entity by IDs.
func (tu *ToolUpdate) AddReviewIDs(ids ...uuid.UUID) *ToolUpdate {
	tu.mutation.AddReviewIDs(ids...)
	return tu
}

// AddReviews adds the "reviews" edges to the Review entity.
func (tu *ToolUpdate) AddReviews(r ...*Review) *ToolUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tu.AddReviewIDs(ids...)
}

// Mutation returns the ToolMutation object of the builder.
func (tu *ToolUpdate) Mutation() *ToolMutation {
	return tu.mutation
}

// ClearReviews clears all "reviews" edges to the Review entity.
func (tu *ToolUpdate) ClearReviews() *ToolUpdate {
	tu.mutation.ClearReviews()
	return tu
}

// RemoveReviewIDs removes the "reviews" edge to Review entities by IDs.
func (tu *ToolUpdate) RemoveReviewIDs(ids ...uuid.UUID) *ToolUpdate {
	tu.mutation.RemoveReviewIDs(ids...)
	return tu
}

// RemoveReviews removes "reviews" edges to Review entities.
func (tu *ToolUpdate) RemoveReviews(r ...*Review) *ToolUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tu.RemoveReviewIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *ToolUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *ToolUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *ToolUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *ToolUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *ToolUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(tool.Table, tool.Columns, sqlgraph.NewFieldSpec(tool.FieldID, field.TypeUUID))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(tool.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(tool.FieldDescription, field.TypeString, value)
	}
	if value, ok := tu.mutation.Category(); ok {
		_spec.SetField(tool.FieldCategory, field.TypeString, value)
	}
	if value, ok := tu.mutation.Website(); ok {
		_spec.SetField(tool.FieldWebsite, field.TypeString, value)
	}
	if value, ok := tu.mutation.ImageURL(); ok {
		_spec.SetField(tool.FieldImageURL, field.TypeString, value)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(tool.FieldCreatedAt, field.TypeTime, value)
	}
	if tu.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tool.ReviewsTable,
			Columns: []string{tool.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedReviewsIDs(); len(nodes) > 0 && !tu.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tool.ReviewsTable,
			Columns: []string{tool.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tool.ReviewsTable,
			Columns: []string{tool.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tool.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// ToolUpdateOne is the builder for updating a single Tool entity.
type ToolUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ToolMutation
}

// SetName sets the "name" field.
func (tuo *ToolUpdateOne) SetName(s string) *ToolUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *ToolUpdateOne) SetNillableName(s *string) *ToolUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *ToolUpdateOne) SetDescription(s string) *ToolUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *ToolUpdateOne) SetNillableDescription(s *string) *ToolUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// SetCategory sets the "category" field.
func (tuo *ToolUpdateOne) SetCategory(s string) *ToolUpdateOne {
	tuo.mutation.SetCategory(s)
	return tuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (tuo *ToolUpdateOne) SetNillableCategory(s *string) *ToolUpdateOne {
	if s != nil {
		tuo.SetCategory(*s)
	}
	return tuo
}

// SetWebsite sets the "website" field.
func (tuo *ToolUpdateOne) SetWebsite(s string) *ToolUpdateOne {
	tuo.mutation.SetWebsite(s)
	return tuo
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (tuo *ToolUpdateOne) SetNillableWebsite(s *string) *ToolUpdateOne {
	if s != nil {
		tuo.SetWebsite(*s)
	}
	return tuo
}

// SetImageURL sets the "image_url" field.
func (tuo *ToolUpdateOne) SetImageURL(s string) *ToolUpdateOne {
	tuo.mutation.SetImageURL(s)
	return tuo
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (tuo *ToolUpdateOne) SetNillableImageURL(s *string) *ToolUpdateOne {
	if s != nil {
		tuo.SetImageURL(*s)
	}
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *ToolUpdateOne) SetCreatedAt(t time.Time) *ToolUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *ToolUpdateOne) SetNillableCreatedAt(t *time.Time) *ToolUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// AddReviewIDs adds the "reviews" edge to the Review entity by IDs.
func (tuo *ToolUpdateOne) AddReviewIDs(ids ...uuid.UUID) *ToolUpdateOne {
	tuo.mutation.AddReviewIDs(ids...)
	return tuo
}

// AddReviews adds the "reviews" edges to the Review entity.
func (tuo *ToolUpdateOne) AddReviews(r ...*Review) *ToolUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tuo.AddReviewIDs(ids...)
}

// Mutation returns the ToolMutation object of the builder.
func (tuo *ToolUpdateOne) Mutation() *ToolMutation {
	return tuo.mutation
}

// ClearReviews clears all "reviews" edges to the Review entity.
func (tuo *ToolUpdateOne) ClearReviews() *ToolUpdateOne {
	tuo.mutation.ClearReviews()
	return tuo
}

// RemoveReviewIDs removes the "reviews" edge to Review entities by IDs.
func (tuo *ToolUpdateOne) RemoveReviewIDs(ids ...uuid.UUID) *ToolUpdateOne {
	tuo.mutation.RemoveReviewIDs(ids...)
	return tuo
}

// RemoveReviews removes "reviews" edges to Review entities.
func (tuo *ToolUpdateOne) RemoveReviews(r ...*Review) *ToolUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tuo.RemoveReviewIDs(ids...)
}

// Where appends a list predicates to the ToolUpdate builder.
func (tuo *ToolUpdateOne) Where(ps ...predicate.Tool) *ToolUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *ToolUpdateOne) Select(field string, fields ...string) *ToolUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Tool entity.
func (tuo *ToolUpdateOne) Save(ctx context.Context) (*Tool, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *ToolUpdateOne) SaveX(ctx context.Context) *Tool {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *ToolUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *ToolUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *ToolUpdateOne) sqlSave(ctx context.Context) (_node *Tool, err error) {
	_spec := sqlgraph.NewUpdateSpec(tool.Table, tool.Columns, sqlgraph.NewFieldSpec(tool.FieldID, field.TypeUUID))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Tool.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tool.FieldID)
		for _, f := range fields {
			if !tool.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tool.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(tool.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(tool.FieldDescription, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Category(); ok {
		_spec.SetField(tool.FieldCategory, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Website(); ok {
		_spec.SetField(tool.FieldWebsite, field.TypeString, value)
	}
	if value, ok := tuo.mutation.ImageURL(); ok {
		_spec.SetField(tool.FieldImageURL, field.TypeString, value)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(tool.FieldCreatedAt, field.TypeTime, value)
	}
	if tuo.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tool.ReviewsTable,
			Columns: []string{tool.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedReviewsIDs(); len(nodes) > 0 && !tuo.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tool.ReviewsTable,
			Columns: []string{tool.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tool.ReviewsTable,
			Columns: []string{tool.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Tool{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tool.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
