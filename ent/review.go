// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"tools-review-backend/ent/review"
	"tools-review-backend/ent/tool"
	"tools-review-backend/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Review is the model entity for the Review schema.
type Review struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Rating holds the value of the "rating" field.
	Rating int `json:"rating,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment string `json:"comment,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReviewQuery when eager-loading is set.
	Edges        ReviewEdges `json:"edges"`
	tool_reviews *uuid.UUID
	user_reviews *uuid.UUID
	selectValues sql.SelectValues
}

// ReviewEdges holds the relations/edges for other nodes in the graph.
type ReviewEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Tool holds the value of the tool edge.
	Tool *Tool `json:"tool,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReviewEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ToolOrErr returns the Tool value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReviewEdges) ToolOrErr() (*Tool, error) {
	if e.Tool != nil {
		return e.Tool, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: tool.Label}
	}
	return nil, &NotLoadedError{edge: "tool"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Review) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case review.FieldRating:
			values[i] = new(sql.NullInt64)
		case review.FieldComment:
			values[i] = new(sql.NullString)
		case review.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case review.FieldID:
			values[i] = new(uuid.UUID)
		case review.ForeignKeys[0]: // tool_reviews
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case review.ForeignKeys[1]: // user_reviews
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Review fields.
func (r *Review) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case review.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case review.FieldRating:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rating", values[i])
			} else if value.Valid {
				r.Rating = int(value.Int64)
			}
		case review.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				r.Comment = value.String
			}
		case review.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case review.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field tool_reviews", values[i])
			} else if value.Valid {
				r.tool_reviews = new(uuid.UUID)
				*r.tool_reviews = *value.S.(*uuid.UUID)
			}
		case review.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_reviews", values[i])
			} else if value.Valid {
				r.user_reviews = new(uuid.UUID)
				*r.user_reviews = *value.S.(*uuid.UUID)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Review.
// This includes values selected through modifiers, order, etc.
func (r *Review) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Review entity.
func (r *Review) QueryUser() *UserQuery {
	return NewReviewClient(r.config).QueryUser(r)
}

// QueryTool queries the "tool" edge of the Review entity.
func (r *Review) QueryTool() *ToolQuery {
	return NewReviewClient(r.config).QueryTool(r)
}

// Update returns a builder for updating this Review.
// Note that you need to call Review.Unwrap() before calling this method if this Review
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Review) Update() *ReviewUpdateOne {
	return NewReviewClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Review entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Review) Unwrap() *Review {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Review is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Review) String() string {
	var builder strings.Builder
	builder.WriteString("Review(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("rating=")
	builder.WriteString(fmt.Sprintf("%v", r.Rating))
	builder.WriteString(", ")
	builder.WriteString("comment=")
	builder.WriteString(r.Comment)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Reviews is a parsable slice of Review.
type Reviews []*Review
